@using Blazor.Diagrams;
@using Blazor.WorkflowEditor.Components
@using System.Activities;
@using System.Xaml;
@using System.Text;
@implements IDisposable

<div class="we-editor">

    <ModalService @ref="modalService">

    </ModalService>
    
    <CascadingValue Value="modalService">
        
        @*ToolBox*@
        <ToolboxComponent Service="service" ToolBoxGroups="ToolBoxGroups"></ToolboxComponent>

        @*Diagramm*@
        <div class="we-designer">
            <div class="we-activity-path">
                <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        @foreach (var pathItem in service.Path)
                        {
                            <li class="breadcrumb-item"><a href="#" @onclick="()=>OpenPath(pathItem)">@pathItem.Name</a>
                            </li>
                        }
                    </ol>
                </nav>
            </div>

            <div class="we-diagram">
                <div style="height: 100%" ondragover="event.preventDefault();" @ondragover:preventDefault @ondrop="OnDrop">
                    <CascadingValue Value="designer">
                        <CascadingValue Value="service">
                            <DiagramCanvas />
                        </CascadingValue>
                    </CascadingValue>
                </div>
            </div>

            <VariablesPanelComponent Service="service" TypeCollection="TypeCollection"></VariablesPanelComponent>
        </div>
    </CascadingValue>
</div>

@code {
    private ModalService? modalService { get; set; } = default!;
    private Blazor.WorkflowEditor.Service service { get; set; } = default!;

    public Diagram designer { get; set; } = default!;

    [Parameter, EditorRequired]
    public IEnumerable<ToolBoxGroup> ToolBoxGroups { get; set; } = default!;

    [Parameter, EditorRequired]
    public List<Type> TypeCollection { get; set; } = default!;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        var options = new DiagramOptions
        {
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            Links = new DiagramLinkOptions
            {
            },
            Zoom = new DiagramZoomOptions
            {
                Minimum = 0.1, // Minimum zoom value
                Inverse = true, // Whether to inverse the direction of the zoom when using the wheel
            }
        };
        this.designer = new(options);

        this.service = new Service(this.designer, this.StateHasChanged);
    }

    public void Dispose()
    {
        service?.Dispose();
    }


    public void Edit(System.Activities.Activity source)
    {
        var ab = new ActivityBuilder() { Implementation = source };
        service.SetActivityBuilder(ab);
    }

    public void New()
    {
        var ab = new ActivityBuilder() { Implementation = new System.Activities.Statements.Sequence() };
        service.SetActivityBuilder(ab);
    }

    public void Load(string source)
    {
        var xr = new StringReader(source);
        var br = System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderReader(new XamlXmlReader(xr));
        var ab = XamlServices.Load(br) switch {
            (ActivityBuilder _ab) => _ab,
            (System.Activities.Activity _a) => new ActivityBuilder() { Implementation = _a },
            _ => throw new NotSupportedException()
        };


        //TODO add validation info
        //var validationResults = System.Activities.Validation.ActivityValidationServices.Validate(ab.Implementation);

        service.SetActivityBuilder(ab);
    }

    public string Save()
    {
        var sb = new StringBuilder();
        var xw = System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderWriter(new XamlXmlWriter(new StringWriter(sb), new XamlSchemaContext()));
        XamlServices.Save(xw, service.GetActivityBuilder());
        return sb.ToString();
    }

    public void OpenPath(PathItem pathItem)
    {
        service.OpenPath(pathItem);
    }


    private async void OnDrop(DragEventArgs e) {

        if (service.DraggedToolboxItem == null)
            return;

        if (service.DraggedToolboxItem.TypeOfActivity.IsGenericType) {
            var genericTypes = service.DraggedToolboxItem.TypeOfActivity
                .GetGenericArguments()
                .Where(t => t.IsGenericParameter)
                .Select(s => new GenericTypeSelectModal.GenericTypeDescription { Key = s.ToString() })
                .ToList();

            if (modalService == null)
                throw new NotSupportedException();

            var modal = await modalService.ShowModal<GenericTypeSelectModal>(new(){
                {"GenericTypes",genericTypes},
                {"TypeCollection",TypeCollection??new List<Type>()}
            });

            if (modal != null && modal.ModalResult == ModalResult.Applied) {
                (bool hasAdded, var result) = service.AddActivity(service.DraggedToolboxItem.TypeOfActivity, modal.BuildedTypes.ToArray()!);
                if (!hasAdded) 
                    return;

                var position = designer.GetRelativeMousePoint(e.ClientX, e.ClientY);
                result.Node.CenterPosition = position;
            }

            StateHasChanged();
        }
        else {
            (bool hasAdded, var result) = service.AddActivity(service.DraggedToolboxItem.TypeOfActivity);
            if (!hasAdded) 
                return;
            
            var position = designer.GetRelativeMousePoint(e.ClientX, e.ClientY);
            result.Node.CenterPosition = position;
        }

        service.DraggedToolboxItem = null;
        
    }

}
