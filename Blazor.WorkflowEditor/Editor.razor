@implements IDisposable

<div class="editor">

    <div class="toolbox" style="@toolboxStyle">
        <div class="caption">
            <button type="button" class="btn" @onclick="()=>ToolboxCollapse()">
                <span class="oi @ToolboxCollapsedIcon() text-primary" aria-hidden="true"></span>
            </button>
        </div>
        @if (!toolboxCollapsed)
        {
            <ul class="groups list-unstyled">
                @foreach (var group in this.ToolBoxGroups)
                {
                    <li class="groupItem">
                        <div class="groupName" @onclick="()=>CollapseGroup(group.Name)">
                            <span class="oi @GroupCollapsedIcon(group.Name)" aria-hidden="true"></span>
                            @group.Name
                        </div>
                        <ul class="items list-unstyled @(HasGroupCollapsed(group.Name))">
                            @foreach (var item in group.Items)
                            {
                                <li @key="item" class="@((item.Image==null?"activityItemWithoutIcon":"activityItem"))" draggable="true" @ondragstart="() => OnDragStart(item)">
                                    @if (item.Image != null)
                                    {
                                        <span class="@item.Image" aria-hidden="true"></span>
                                    }
                                    @item.Name
                                </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
        }
    </div>

    <div class="diagram-editor">
        <div class="diagram-path">
            <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
                <ol class="breadcrumb">
                @foreach (var pathItem in service.Path)
                {
                    <li class="breadcrumb-item"><a href="#" @onclick="()=>OpenPath(pathItem)">@pathItem.Name</a></li>
                }
                </ol>
            </nav>
        </div>

        <div class="diagram-main">
            <div class="diagram" ondragover="event.preventDefault();" @ondragover:preventDefault @ondrop="OnDrop">
                <CascadingValue Value="designer">
                    <CascadingValue Value="service">
                        <DiagramCanvas></DiagramCanvas>
                    </CascadingValue>
                </CascadingValue>
            </div>
        </div>        
        
        <div class="variables">
            <table class="table-sm caption-top w-100">
                <caption class="clear-fix">
                    Variables
                    <div class="float-end">
                        <div>
                            <button type="button" class="btn">
                                <span class="oi oi-plus text-primary" aria-hidden="true"></span>
                            </button>
                            <button type="button" class="btn" @onclick="()=>variabledCollapsed=!variabledCollapsed">
                                <span class="oi @VariablesCollapsedIcon() text-primary" aria-hidden="true"></span>
                            </button>
                        </div>
                    </div>
                </caption>
                <thead class="@HasVariablesCollapsed()">
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Type</th>
                        <th scope="col">Default value</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody class="@HasVariablesCollapsed()">
        @foreach (var variable in service.Variables)
        {
                        <tr>
                            <td>@variable.Name</td>
                            <td>@variable.Type</td>
                            <td>@variable.DefaultValue</td>
                            <td>
                                <div class="float-end">
                                    <button type="button" class="btn">
                                        <span class="oi oi-pencil text-primary" aria-hidden="true"></span>
                                    </button>
                                    <button type="button" class="btn">
                                        <span class="oi oi-x text-danger" aria-hidden="true"></span>
                                    </button>
                                </div>
                            </td>
                        </tr>
        }
                </tbody>
            </table>
        </div>

    </div>

</div>

@code {
    private Diagram designer { get; set; } = default!;
    private ToolBoxItem? draggedToolboxItem;
    private Blazor.WorkflowEditor.Service service { get; set; } = default!;

    [Parameter, EditorRequired]
    public IEnumerable<ToolBoxGroup> ToolBoxGroups { get; set; } = default!;
    private IDictionary<string, bool> collapsedGroups = new Dictionary<string, bool>();
    private bool variabledCollapsed = false;
    private bool toolboxCollapsed = false;
    private int toolboxWidth = 36;
    private string toolboxStyle = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var options = new DiagramOptions
        {
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            Links = new DiagramLinkOptions
            {
            },
            Zoom = new DiagramZoomOptions
            {
                Minimum = 0.1, // Minimum zoom value
                Inverse = true, // Whether to inverse the direction of the zoom when using the wheel
            }
        };
        this.designer = new(options);

        this.service = new Service(this.designer, this.StateHasChanged);

        foreach (var item in this.ToolBoxGroups.Where(p => p.Items.Count != 0))
        {
            collapsedGroups.Add(item.Name, false);
        }
    }

    public void Dispose()
    {
        service?.Dispose();
    }

    private void OnDragStart(ToolBoxItem key)
    {
        draggedToolboxItem = key;
    }

    private void OnDrop(DragEventArgs e)
    {
        if (draggedToolboxItem == null)
            return;

        (bool hasAdded, var result) = service.AddActivity(draggedToolboxItem.TypeOfActivity);
        if (hasAdded)
        {
            var position = designer.GetRelativeMousePoint(e.ClientX, e.ClientY);
            result.Node.CenterPosition = position;
        }

        draggedToolboxItem = null;
    }

    public void Edit(System.Activities.Activity source)
    {
        service.SetActivity(source);
    }

    public void Load(string source)
    {
        var activity = (System.Activities.Activity)System.Xaml.XamlServices.Parse(source);
        service.SetActivity(activity);
    }

    public string Save()
    {
        var activity = service.GetActivity();
        return System.Xaml.XamlServices.Save(activity);
    }

    public void OpenPath(PathItem pathItem)
    {
        service.OpenPath(pathItem);
    }

    private void CollapseGroup(string name)
    {
        if (collapsedGroups.ContainsKey(name))
        {
            collapsedGroups[name] = !collapsedGroups[name];
        }
    }

    private string HasGroupCollapsed(string name)
    {
        if (collapsedGroups.ContainsKey(name))
        {
            return collapsedGroups[name] ? "collapse" : "";
        }
        return string.Empty;
    }

    private string GroupCollapsedIcon(string name)
    {
        if (collapsedGroups.ContainsKey(name))
        {
            return collapsedGroups[name] ? "oi oi-plus" : "oi oi-minus";
        }
        return "";
    }

    private string VariablesCollapsedIcon()
    {
        return variabledCollapsed ? "oi oi-arrow-top" : "oi oi-arrow-bottom";
    }

    private string HasVariablesCollapsed()
    {
        return variabledCollapsed ? "collapse" : "";
    }

    private void ToolboxCollapse()
    {
        toolboxCollapsed = !toolboxCollapsed;
        toolboxWidth = toolboxCollapsed ? 36 : 400;
        toolboxStyle = $"width: {toolboxWidth}px;";
        Console.WriteLine(toolboxStyle);

    }
    private string ToolboxCollapsedIcon()
    {
        return toolboxCollapsed ? "oi oi-arrow-right" : "oi oi-arrow-left";
    }
}
