@using Blazor.WorkflowEditor.Components
@implements IDisposable

<div class="editor">
    <GenericTypeSelectModal @ref="genericTypeSelectModal" Types="TypeCollection"></GenericTypeSelectModal>

    <div class="toolbox" style="@toolboxStyle">
        <div class="caption">
            <div class="row">
                <div class="col-1">
                    <button type="button" class="btn" @onclick="()=>ToolboxCollapse()">
                        <span class="oi @ToolboxCollapsedIcon() text-primary" aria-hidden="true"></span>
                    </button>
                </div>
                @if (!toolboxCollapsed)
                {

                    <div class="col-11">
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="toolboxFilter">
                            <button type="button" class="btn" @onclick="()=>toolboxFilter=string.Empty">
                                <span class="oi oi-x text-primary" style="align-self: center;"></span>
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
        @if (!toolboxCollapsed)
        {
            <ul class="groups list-unstyled">
                @foreach (var group in FilterdToolBoxGroups)
                {
                    <li class="groupItem">
                        <div class="groupName" @onclick="()=>CollapseGroup(group.Name)">
                            <span class="oi @GroupCollapsedIcon(group.Name)" aria-hidden="true"></span>
                            @group.Name
                        </div>
                        <ul class="items list-unstyled @(HasGroupCollapsed(group.Name))">
                            @foreach (var item in group.Items)
                            {
                                <li @key="item" class="@((item.Image==null?"activityItemWithoutIcon":"activityItem"))"
                        draggable="true" @ondragstart="() => OnDragStart(item)" @ondragenter="() => OnDragEnter(item)">
                                    @if (item.Image != null)
                                    {
                                        <span class="@item.Image" aria-hidden="true"></span>
                                    }
                                    @item.Name
                                </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
        }
    </div>

    <div class="diagram-editor">
        <div class="diagram-path">
            <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
                <ol class="breadcrumb">
                    @foreach (var pathItem in service.Path)
                    {
                        <li class="breadcrumb-item"><a href="#" @onclick="()=>OpenPath(pathItem)">@pathItem.Name</a></li>
                    }
                </ol>
            </nav>
        </div>

        <div class="diagram-main">
            <div class="@diagramStyle" ondragover="event.preventDefault();" @ondragover:preventDefault @ondrop="OnDrop">
                <CascadingValue Value="designer">
                    <CascadingValue Value="service">
                        <DiagramCanvas></DiagramCanvas>
                    </CascadingValue>
                </CascadingValue>
            </div>
        </div>

        <div class="variables">
            <div class="variables-table">
                <table class="table-sm caption-top w-100">
                    <caption class="clear-fix">
                        Variables
                        <div class="float-end">
                            <div>
                                <button type="button" class="btn">
                                    <span class="oi oi-plus text-primary" aria-hidden="true"></span>
                                </button>
                                <button type="button" class="btn" @onclick="()=>variabledCollapsed=!variabledCollapsed">
                                    <span class="oi @VariablesCollapsedIcon() text-primary" aria-hidden="true"></span>
                                </button>
                            </div>
                        </div>
                    </caption>
                    <tbody class="@HasVariablesCollapsed()">
                        @foreach (var item in GetGroupedVariables)
                        {
                            <tr>

                                <td>
                                    <table class="table-sm caption-top w-100">
                                        <caption class="clear-fix">
                                            <div>
                                                <span
                                                class="oi text-primary @(hasVariablesGroupCollapsed(item.Activity?.DisplayName)?"oi-arrow-top":"oi-arrow-bottom")"
                                                style="vertical-align: text-top; cursor: pointer;" aria-hidden="true"
                                                @onclick="()=>variablesGroupCollapse(item.Activity?.DisplayName)">
                                                </span>
                                                @(item.Activity?.DisplayName??"...")
                                            </div>
                                        </caption>
                                        <thead
                                        class="@(hasVariablesGroupCollapsed(item.Activity?.DisplayName??"...")?"collapse":"")">
                                            <tr>
                                                <th scope="col"></th>
                                                <th scope="col">Name</th>
                                                <th scope="col">Type</th>
                                                <th scope="col">Default value</th>
                                                <th scope="col"></th>
                                            </tr>
                                        </thead>
                                        <tbody
                                        class="@(hasVariablesGroupCollapsed(item.Activity?.DisplayName??"...")?"collapse":"")">
                                            @foreach (var variable in item.Variables)
                                            {
                                                <tr>
                                                    <td style="width: 20px;"></td>
                                                    <td>@variable.Name</td>
                                                    <td>@variable.Type</td>
                                                    <td>@variable.DefaultValue</td>
                                                    <td>
                                                        <div class="float-end">
                                                            <button type="button" class="btn">
                                                                <span class="oi oi-pencil text-primary"
                                                            aria-hidden="true"></span>
                                                            </button>
                                                            <button type="button" class="btn">
                                                                <span class="oi oi-x text-danger" aria-hidden="true"></span>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>

@code {
    private GenericTypeSelectModal? genericTypeSelectModal = new GenericTypeSelectModal();

    class VariableGroupModel
    {
        public System.Activities.Activity? Activity { get; set; }
        public List<Variable> Variables { get; set; } = new List<Variable>();
    }

    private Diagram designer { get; set; } = default!;
    private ToolBoxItem? draggedToolboxItem;
    private Blazor.WorkflowEditor.Service service { get; set; } = default!;

    [Parameter, EditorRequired]
    public IEnumerable<ToolBoxGroup> ToolBoxGroups { get; set; } = default!;

    [Parameter, EditorRequired]
    public List<Type> TypeCollection { get; set; } = default!;

    private IDictionary<string, bool> collapsedGroups = new Dictionary<string, bool>();
    private bool variabledCollapsed = false;
    private bool toolboxCollapsed = false;
    private int toolboxWidth = 36;
    private string toolboxStyle = "";

    private string diagramStyle = "diagram";

    private IEnumerable<ToolBoxGroup> FilterdToolBoxGroups
    {
        get
        {
            if (!string.IsNullOrWhiteSpace(toolboxFilter))
            {
                var result = new List<ToolBoxGroup>();
                foreach (var group in ToolBoxGroups)
                {
                    var items = group.Items.Where(s => s.Name.ToLower().Contains(toolboxFilter.ToLower())).ToList();
                    if (items.Count > 0)
                    {
                        result.Add(new ToolBoxGroup
                        {
                            Description = group.Description,
                            Name = group.Name,
                            Items = items
                        });
                    }
                }
                return result;
            }
            return ToolBoxGroups;
        }
    }
    private string toolboxFilter { get; set; } = string.Empty;


    private Dictionary<string, bool> variablesGroupCollapsed { get; set; } = new Dictionary<string, bool>();

    private List<VariableGroupModel> GetGroupedVariables
    {
        get
        {
            List<VariableGroupModel> result = new List<VariableGroupModel>();
            foreach (var item in service.Variables)
            {
                var gm = result.FirstOrDefault(p => p.Activity == item.Activity);
                if (gm == null)
                {
                    if (!variablesGroupCollapsed.ContainsKey(item.Activity.DisplayName))
                    {
                        variablesGroupCollapsed.Add(item.Activity.DisplayName, false);
                    }
                    gm = new VariableGroupModel
                    {
                        Activity = item.Activity,
                        Variables = new List<Variable>(),
                    };
                    result.Add(gm);
                }
                gm.Variables.Add(item);
            };
            return result;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var options = new DiagramOptions
        {
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            Links = new DiagramLinkOptions
            {
            },
            Zoom = new DiagramZoomOptions
            {
                Minimum = 0.1, // Minimum zoom value
                Inverse = true, // Whether to inverse the direction of the zoom when using the wheel
            }
        };
        this.designer = new(options);

        this.service = new Service(this.designer, this.StateHasChanged);

        foreach (var item in this.ToolBoxGroups.Where(p => p.Items.Count != 0))
        {
            collapsedGroups.Add(item.Name, false);
        }
    }

    public void Dispose()
    {
        service?.Dispose();
    }

    private void OnDragStart(ToolBoxItem key)
    {
        if (service.CheckAddActivity(key.TypeOfActivity) == false)
            return;

        draggedToolboxItem = key;
    }

    private void OnDragEnter(ToolBoxItem key)
    {
        if (service.CheckAddActivity(key.TypeOfActivity) == false)
            return;
    }

    private async void OnDrop(DragEventArgs e)
    {
        if (draggedToolboxItem == null)
            return;

        if (draggedToolboxItem.TypeOfActivity.IsGenericType)
        {
            if (genericTypeSelectModal == null) return;

            genericTypeSelectModal.GenericTypes = draggedToolboxItem.TypeOfActivity.GetGenericArguments().Where(t =>
            t.IsGenericParameter).Select(s => new GenericTypeSelectModal.GenericTypeDescription { Key = s.ToString() }).ToList();
            var modalResult = await genericTypeSelectModal.Show();
            if (modalResult != ModalResult.Applied) return;


            (bool hasAdded, var result) =
            service.AddActivity(draggedToolboxItem.TypeOfActivity, genericTypeSelectModal.GenericTypes.Select(s =>
            s.Value).ToArray());
            if (!hasAdded) return;
            var position = designer.GetRelativeMousePoint(e.ClientX, e.ClientY);
            result.Node.CenterPosition = position;
        }
        else
        {
            (bool hasAdded, var result) = service.AddActivity(draggedToolboxItem.TypeOfActivity);
            if (!hasAdded) return;
            var position = designer.GetRelativeMousePoint(e.ClientX, e.ClientY);
            result.Node.CenterPosition = position;
        }
        draggedToolboxItem = null;
    }

    public void Edit(System.Activities.Activity source)
    {
        service.SetActivity(source);
    }

    public void New()
    {
        service.New();
    }

    public void Load(string source)
    {
        var activity = (System.Activities.Activity)System.Xaml.XamlServices.Parse(source);
        service.SetActivity(activity);
    }

    public string Save()
    {
        var activity = service.GetActivity();
        return System.Xaml.XamlServices.Save(activity);
    }

    public void OpenPath(PathItem pathItem)
    {
        service.OpenPath(pathItem);
    }

    private void CollapseGroup(string name)
    {
        if (collapsedGroups.ContainsKey(name))
        {
            collapsedGroups[name] = !collapsedGroups[name];
        }
    }

    private string HasGroupCollapsed(string name)
    {
        if (collapsedGroups.ContainsKey(name))
        {
            return collapsedGroups[name] ? "collapse" : "";
        }
        return string.Empty;
    }

    private string GroupCollapsedIcon(string name)
    {
        if (collapsedGroups.ContainsKey(name))
        {
            return collapsedGroups[name] ? "oi oi-plus" : "oi oi-minus";
        }
        return "";
    }

    private string VariablesCollapsedIcon()
    {
        return variabledCollapsed ? "oi oi-arrow-top" : "oi oi-arrow-bottom";
    }

    private string HasVariablesCollapsed()
    {
        return variabledCollapsed ? "collapse" : "";
    }

    private void ToolboxCollapse()
    {
        toolboxCollapsed = !toolboxCollapsed;
        toolboxWidth = toolboxCollapsed ? 36 : 400;
        toolboxStyle = $"width: {toolboxWidth}px;";
        Console.WriteLine(toolboxStyle);

    }
    private string ToolboxCollapsedIcon()
    {
        return toolboxCollapsed ? "oi oi-arrow-right" : "oi oi-arrow-left";
    }

    private bool hasVariablesGroupCollapsed(string? key)
    {
        key = key ?? "...";
        return variablesGroupCollapsed.ContainsKey(key) ? variablesGroupCollapsed[key] : false;
    }

    private void variablesGroupCollapse(string? key)
    {
        key = key ?? "...";
        if (variablesGroupCollapsed.ContainsKey(key))
        {
            variablesGroupCollapsed[key] = variablesGroupCollapsed[key] ? false : true;
        }
    }
}
