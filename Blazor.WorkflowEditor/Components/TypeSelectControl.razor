@using System.Diagnostics.CodeAnalysis
<div class="mb-3 row">
    <label for="genericType" class="col-4 col-form-label">@Label</label>
    <div class="autocomplete col-8" @onfocusout="()=>inputOnFocus(false)">
        <input @bind=_filter @oninput=HandleInput class="form-control" id="genericType"
            @onfocusin="()=>inputOnFocus(true)" />
        @if (_filteredTypes is not null && _filteredTypes.Count() > 0 && _inputFocused == true)
        {
            if (_filteredTypes.Where(p => p.ToString().ToLower() == _filter.ToLower()).Count() != 1)
            {
                <ul class="options">
                    @foreach (var type in _filteredTypes)
                    {
                        <li class="option" @onclick=@(() => SelectType(type.ToString()))>
                            <span class="option-text">@type</span>
                        </li>
                    }
                </ul>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<Type>? _filteredTypes;
    private bool _inputFocused = false;
    private string? _filter = string.Empty;
    private Type? _value;

    [Parameter]
    public List<Type>? Types { get; set; }

    [Parameter]
    public string? Label { get; set; } = string.Empty;

    [Parameter]
    public Type? Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            ValueChanged.InvokeAsync(_value);
        }
    }

    [Parameter]
    public EventCallback<Type> ValueChanged { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _filteredTypes = Types ?? new List<Type>();
    }

    private void HandleInput(ChangeEventArgs e)
    {
        _filter = e.Value?.ToString() ?? string.Empty;
        if (_filter.Trim().Length > 2)
        {
            _filteredTypes = Types?.Where(p => p.ToString().ToLower().Contains(_filter.ToLower())) ?? new List<Type>(); ;
        }
        else
        {
            _filteredTypes = Types ?? new List<Type>();
        }
        Value = Type.GetType(_filter);
    }

    private void SelectType(string type)
    {
        _filter = type;
        Value = Type.GetType(_filter);
    }

    private void inputOnFocus(bool focused)
    {
        _inputFocused = true;
    }
}
