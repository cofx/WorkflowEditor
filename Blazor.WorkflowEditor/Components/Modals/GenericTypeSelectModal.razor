@implements IDisposable
@implements IModal

<Modal @ref="Modal">
  <Header>
    <ModalHeader TitleText="Select generic type " OnClose="Modal!.Close"></ModalHeader>
  </Header>

  <Body>

      @foreach (var item in GenericTypes)
      {
        <VariableTypeConstructorComponent @key="item" @ref="item.ObjRef" TypeCollection="TypeCollection" VariableType="item.Value">
        </VariableTypeConstructorComponent>
      }

  </Body>

  <Footer>
    <ModalFooter OnClose="Modal!.Close" OnApply="Modal!.Apply"></ModalFooter>
  </Footer>
</Modal>


@code {
    public class GenericTypeDescription
    {
        public string Key { get; set; } = string.Empty;
        public Type? Value { get; set; } = null;
        public object? ObjRef { get; set; } = null;
    }

    public Modal? Modal { get; set; } = new()!;

    [Parameter]
    public List<Type?> TypeCollection { get; set; } = new();

    [Parameter]
    public List<GenericTypeDescription> GenericTypes { get; set; } = new();

    public List<Type?> BuildedTypes => GenericTypes.Select(p => p.ObjRef)
      .OfType<VariableTypeConstructorComponent>()
      .Where(p => p != null)
      .Select(p => p.BuildedType).ToList();

    public ModalResult ModalResult => Modal!.ModalResult; 

    public Task<ModalResult> Show() {
        return Modal!.Show();
    }

    public void Dispose() {
        Modal!.Hide();

        GC.SuppressFinalize(this);
    }

}